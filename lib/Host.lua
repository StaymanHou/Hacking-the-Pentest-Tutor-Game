require "lib.util"
if Rootkit == nil then
  Rootkit = require "lib.Rootkit"
end
if Tool == nil then
  Tool = require "lib.Tool"
end
if Virus == nil then
  Virus = require "lib.Virus"
end
if AddrPortListenningService == nil then
  AddrPortListenningService = require "lib.AddrPortListenningService"
end

local Host = {}
Host.__index = Host

Host.State = {}
Host.State.Mine = 0
Host.State.Undiscovered = 1
Host.State.Discovered = 2
Host.State.Compromised = 3
Host.State.RootAccess = 4

Host.Type = {}
Host.Type.Server = 0
Host.Type.Desktop = 1
Host.Type.Laptop = 2
Host.Type.Mobile = 3
Host.Type.Tablet = 4

function Host.new(hostname, state, os, type)
  local self = setmetatable({}, Host)
  self.hostname = hostname
  self.state = nil
  self.selected = false
  self.os = os
  self.configurations = {}
  self.network_interfaces = {}
  self.services = {}
  self.addr_port_listenning_services = {}
  self.viruses = {}
  self.rootkits = {}
  self.tools = {}
  self.type = type
  self:set_state(state)
  return self
end

function Host:set_state(new_state)
  self.state = new_state
end

function Host:get_state()
  return self.state
end

function Host:install(program)
  if program.__index == Virus then
    self.viruses[#(self.viruses)+1] = program
  elseif program.__index == Rootkit then
    self.rootkits[#(self.rootkits)+1] = program
  elseif program.__index == Tool then
    self.tools[#(self.tools)+1] = program
  end
end

function Host:attach_network_interface(network_interface)
  self.network_interfaces[#(self.network_interfaces)+1] = network_interface
  network_interface.host = self
end

function Host:add_service(service)
  self.services[#(self.services)+1] = service
  return service
end

function Host:add_configuration(configuration)
  self.configurations[#(self.configurations)+1] = configuration
  return configuration
end

function Host:add_addr_port_listenning_service(network_interface, protocol, port, service)
  addr_port_listenning_service = AddrPortListenningService.new(network_interface, protocol, port, service)
  self.addr_port_listenning_services[#(self.addr_port_listenning_services)+1] = addr_port_listenning_service
end

function Host:reachable_hosts()
  reachable_hosts = {self}
  for index, network_interface in ipairs(self.network_interfaces) do
    if network_interface.network then
      for cni_index, cni in ipairs(network_interface.network.connected_network_interfaces) do
        reachable_hosts[#(reachable_hosts)+1] = cni.host
      end
    end
  end
  return reachable_hosts
end

function Host:get_reachable_host_by_ip(ip)
  if ip == "127.0.0.1" then
    return self
  end
  for index, network_interface in ipairs(self.network_interfaces) do
    if network_interface.network and network_interface.network:has_ip(ip) then
      for cni_index, cni in ipairs(network_interface.network.connected_network_interfaces) do
        if cni.ip == ip then
          return cni.host
        end
      end
    end
  end
  return nil
end

function Host:run(action, target_host, skip_reachable_validation)
  if skip_reachable_validation then
    return action.outcome.eval(target_host)
  end
  flag_target_unreachable = true
  for index, reachable_host in ipairs(self:reachable_hosts()) do
    if target_host == reachable_host then
      flag_target_unreachable = false
      break
    end
  end
  if flag_target_unreachable then
    return "Destination not reachable!"
  end
  return action.outcome.eval(target_host)
end

function Host:run_against_cidr(action, CIDR)
  local splited_cidr = CIDR:split("/")
  local routing_prefix_bits = tonumber(splited_cidr[2])
  local network_prefix = get_network_prefix(splited_cidr[1], routing_prefix_bits)
  local hosts_nubmer = math.pow(2, 32-routing_prefix_bits)
  result_string = ""
  for i=0,hosts_nubmer-1 do
    local target_ip = number_to_ip(network_prefix+i)
    local target_host = self:get_reachable_host_by_ip(target_ip)
    if target_host then
      result = Host:run(action, target_host, true)
      if result then
        result_string = result_string .. "\n" .. result
      end
    else
      result_string = result_string .. "\nDestination (" .. target_ip .. ") not reachable!"
    end
  end
  return result_string
end

function Host:to_json()
  host = {}
  host.CIDR = self.CIDR
  return host
end

return Host