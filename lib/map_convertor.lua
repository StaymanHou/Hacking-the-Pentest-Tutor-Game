local json = require "lib.json"
if Domain == nil then
  Domain = require "lib.Domain"
end
if Network == nil then
  Network = require "lib.Network"
end
if Host == nil then
  Host = require "lib.Host"
end

local map_convertor = {}

function test(...)
  -- body
end

function map_convertor:encode(tmp_map)
  json_map_str = {}
  json_map_str.domains = {}
  json_map_str.networks = {}
  json_map_str.hosts = {}
  for domain_index, domain in ipairs(tmp_map.domains) do
    json_map_str.domains[#(json_map_str.domains)+1] = domain:to_json()
  end
  for network_index, network in ipairs(tmp_map.networks) do
    json_map_str.networks[#(json_map_str.networks)+1] = network:to_json()
  end
  for host_index, host in ipairs(tmp_map.hosts) do
    json_map_str.hosts[#(json_map_str.hosts)+1] = host:to_json(tmp_map.networks)
  end
  return json:encode(json_map_str)
end

function map_convertor:decode(json_map_str)
  json_map = json:decode(json_map_str)
  local tmp_map = {}
  tmp_map.domains = {}
  tmp_map.networks = {}
  tmp_map.hosts = {}
  for domain_index, domain_json in ipairs(json_map.domains) do
    tmp_map.domains[domain_index] = Domain.from_json(domain_json)
  end
  for network_index, network_json in ipairs(json_map.networks) do
    tmp_map.networks[network_index] = Network.from_json(network_json)
  end
  for host_index, host_json in ipairs(json_map.hosts) do
    tmp_map.hosts[host_index] = Host.from_json(host_json, tmp_map.networks)
  end
  return tmp_map
end

return map_convertor