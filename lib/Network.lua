require "lib.util"

local Network = {}
Network.__index = Network
Network.network_prefix = nil
Network.routing_prefix_bits = nil

function get_network_prefix(ip, routing_prefix_bits)
  local digits = ip:split("%.")
  local network_prefix = 0
  for i=1,4 do
    network_prefix = bit32.lshift(network_prefix, 8)
    network_prefix = network_prefix + tonumber(digits[i])
  end
  if routing_prefix_bits < 32 then
    network_prefix = bit32.replace(network_prefix, 0, 0, 32-routing_prefix_bits)
  end
  return network_prefix
end

function network_prefix_to_ip(network_prefix)
  local ip_digits = {}
  for i=1,4 do
    local field = (4-i)*8
    ip_digits[i] = tostring(bit32.extract(network_prefix, field , 8))
  end
  return table.concat(ip_digits, ".")
end

function Network.new(CIDR)
  local self = setmetatable({}, Network)
  local splited_cidr = CIDR:split("/")
  self.routing_prefix_bits = tonumber(splited_cidr[2])
  self.network_prefix = get_network_prefix(splited_cidr[1], self.routing_prefix_bits)
  self.CIDR = network_prefix_to_ip(self.network_prefix) .. "/" .. tostring(self.routing_prefix_bits)
  return self
end

function Network:get_cidr()
  return self.CIDR
end

function Network:has_ip(ip)
  if self.network_prefix == get_network_prefix(ip, self.routing_prefix_bits) then
    return true
  else
    return false
  end
end

function Network:add_host(host)
  -- return self.state
end

function Network:remove_host(host)

end

return Network
