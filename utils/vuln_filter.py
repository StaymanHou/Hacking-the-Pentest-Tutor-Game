import re

DEBUG = False
TARGET = "Windows"

def version_in(the_version, from_version, to_version):
  if from_version is None and to_version is None:
    return False
  the_version = the_version.split(".")
  if from_version is not None:
    from_version = from_version.split(".")
  to_version = to_version.split(".")
  if from_version is not None:
    if int(the_version[0]) < int(from_version[0]):
      return False
  if int(the_version[0]) > int(to_version[0]):
    return False
  if from_version is not None:
    if from_version[1] != "x" and int(the_version[1]) < int(from_version[1]):
      return False
  if to_version[1] != "x" and int(the_version[1]) > int(to_version[1]):
    return False
  if len(the_version) == 2:
    return True
  if from_version is not None:
    if len(from_version) > 2:
      if from_version[2] != "x" and int(the_version[2]) < int(from_version[2]):
        return False
  if len(to_version) > 2:
    if to_version[2] != "x" and int(the_version[2]) > int(to_version[2]):
      return False
  return True

def version_belongs_to(the_version, spec_version):
  the_version = the_version.split(".")
  spec_version = spec_version.split(".")
  if the_version[0] != spec_version[0]:
    return False
  if spec_version[1] != "x" and the_version[1] != spec_version[1]:
    return False
  if len(the_version) == 2 or len(spec_version) == 2:
    return True
  if spec_version[2] != "x" and the_version[2] != spec_version[2]:
    return False
  return True

f = open("../data/vulns.dat")
s = f.read()

vulns = s.split("======================================================\n")
vulns = vulns[1:]

target_versions = {
  "Linux": ["3.17", "3.16", "3.15", "3.14", "3.13", "3.12", "3.11", "3.10", "3.9", "3.8", "3.7", "3.6", "3.5", "3.4", "3.3", "3.2", "3.1", "3.0", "2.6.39", "2.6.38", "2.6.37", "2.6.36", "2.6.35", "2.6.34", "2.6.33", "2.6.32", "2.6.31", "2.6.30", "2.6.29", "2.6.28", "2.6.27", "2.6.26", "2.6.25", "2.6.24", "2.6.23", "2.6.22", "2.6.21", "2.6.20", "2.6.19", "2.6.18", "2.6.17", "2.6.16", "2.6.15", "2.6.14", "2.6.13", "2.6.12", "2.6.11", "2.6.10", "2.6.9", "2.6.8", "2.6.7", "2.6.6", "2.6.5", "2.6.4", "2.6.3", "2.6.2", "2.6.1", "2.6.0"],
  "OS X": ["10.0", "10.1", "10.2", "10.3", "10.4", "10.5", "10.6", "10.7", "10.8", "10.9", "10.10"],
  "Windows": ["NT 3.1", "NT 3.5", "NT 3.51", "NT 4.00", "2000", "XP", "XP, Service Pack 1", "XP, Service Pack 2", "XP, Service Pack 3", "Server 2003", "Server 2003, Service Pack 1", "Vista, RC1", "Vista, RC2", "Vista", "Vista, Service Pack 1", "Vista, Service Pack 2", "Server 2008", "Server 2008 R2, SP1", "7", "7, Service Pack 1", "7, Service Pack 2", "Server 2012", "8", "Phone 8", "Server 2012 R2", "8.1", "8.1, Update 1"],
}

pattern = {
  "Linux": "(?:Linux|Linux kernel|Linux Kernel)",
  "OS X": "OS X",
  "Windows": "Windows",
}

# MacOS X
if TARGET == "OS X":
  filtered_vulns = [vuln for vuln in vulns if ("OS X" in vuln) and ("Windows" not in vuln) and ("Cisco IOS" not in vuln) and ("Apple OS X Server" not in vuln)]
if TARGET == "Linux":
  filtered_vulns = [vuln for vuln in vulns if ("Linux" in vuln) and ("Windows" not in vuln) and ("Red Hat Enterprise Linux" not in vuln)]
if TARGET == "Windows":
  filtered_vulns = [vuln for vuln in vulns if ("Windows" in vuln) and ("Adobe Reader" not in vuln) and ("OS X" not in vuln and "Linux" not in vuln)]

abs_vulns = []
miss_vulns = []
for vuln in filtered_vulns:
  abs_vuln = {"name": "", "versions": []}
  abs_vuln["name"] = vuln.split("\n")[0][6:]
  tmp_str = " ".join(vuln.split("\n"))
  if TARGET == "Windows":
    spec_versions = []
    for version in target_versions[TARGET]:
      if "Windows " + version in tmp_str:
        spec_versions.append(version)
    if len(spec_versions) > 0:
      abs_vuln["versions"] = spec_versions
      abs_vulns.append(abs_vuln)
    else:
      abs_vuln["versions"] = tmp_str
      miss_vulns.append(abs_vuln)
    continue
  m = re.search(pattern[TARGET] + " (\d+\.\d+(?:\.\d+|\.x)?\s)?(?:before|through) (\d+\.\d+(?:\.\d+|\.x)?)(?:,|\s)", tmp_str)
  if m is not None:
    from_version = m.group(1)
    if from_version is not None:
      from_version = from_version.strip()
    to_version = m.group(2).strip()
    spec_versions = []
    abs_vuln["versions"] = [from_version, to_version, spec_versions]
    abs_vulns.append(abs_vuln)
    continue
  m = re.search(pattern[TARGET] + " (\d+\.\d+(?:\.\d+|\.x)?) and earlier(?:,|\s)", tmp_str)
  if m is not None:
    from_version = None
    to_version = m.group(1).strip()
    spec_versions = []
    abs_vuln["versions"] = [from_version, to_version, spec_versions]
    abs_vulns.append(abs_vuln)
    continue
  m = re.search(pattern[TARGET] + " (\d+\.\d+(?:\.\d+|\.x)?)(?:,|\s)", tmp_str)
  if m is not None:
    from_version = None
    to_version = None
    spec_versions = [m.group(1).strip()]
    abs_vuln["versions"] = [from_version, to_version, spec_versions]
    abs_vulns.append(abs_vuln)
    continue
  abs_vuln["versions"] = tmp_str
  miss_vulns.append(abs_vuln)

if DEBUG:
  print "found: ", len(abs_vulns), " | missing: ", len(miss_vulns)
  print "===================================\n"
  for vuln in abs_vulns:
    print vuln
  print "===================================\n"
  for vuln in miss_vulns:
    print vuln
  print "==================================="
  print "===================================\n"

if not DEBUG:
  versions_vulns = {}
  for version in target_versions[TARGET]:
    versions_vulns[version] = []
    for vuln in abs_vulns:
      if TARGET == "Windows":
        if version in vuln["versions"]:
          versions_vulns[version].append(vuln["name"])
        continue
      if version_in(version, vuln["versions"][0], vuln["versions"][1]):
        versions_vulns[version].append(vuln["name"])
        continue
      for spec_version in vuln["versions"][2]:
        if version_belongs_to(version, spec_version):
          versions_vulns[version].append(vuln["name"])
          break
      else:
        continue

  for version in target_versions[TARGET]:
    vulns = versions_vulns[version]
    print '======================================================'
    print 'Name:', TARGET
    print 'Version:', version
    for vuln in vulns:
      print 'Vulnerability:', vuln
