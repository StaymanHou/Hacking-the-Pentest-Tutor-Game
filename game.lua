Vulnerability = require "lib.Vulnerability"
Os = require "lib.Os"
Configuration = require "lib.Configuration"
Service = require "lib.Service"
Outcome = require "lib.Outcome"
Virus = require "lib.Virus"
Rootkit = require "lib.Rootkit"
Action = require "lib.Action"
Tool = require "lib.Tool"
Domain = require "lib.Domain"
Network = require "lib.Network"
NetworkInterface = require "lib.NetworkInterface"
AddrPortListenningService = require "lib.AddrPortListenningService"
Host = require "lib.Host"
dns_resolver = require "lib.dns_resolver"
map = require "map"
map_convertor = require "lib.map_convertor"

game = {}
game.score = 0
game.map = map
game.map_save_path = "save/map.json"
game.map_pathes = {
  tutorial = "maps/tutorial.json",
  example = "maps/example.json"
}
game.loading = require "state.loading"
game.main_menu = require "state.main_menu"
game.message_modal = require "state.message_modal"
game.play = require "state.play"

function game:load()
  loveframes.util.SetActiveSkin("Hack_Menu")
  loveframes.SetState("main_menu")
  game.loading:load()
  game.main_menu:load()
  game.message_modal:load()
  game.play:load()
end

function game.update(dt)
  gamestate = loveframes.GetState()
  if gamestate == "play" then
    game.play.update(dt)
  end
end

function game.draw()
  gamestate = loveframes.GetState()
  if gamestate == "play" then
    game.play.draw()
  end
end

function game:save_map()
  local json_str = map_convertor:encode(self.map)
  local map_file = io.open(self.map_save_path, "w")
  map_file:write(json_str)
  map_file:close()
end

function game:load_map(...)
  self.map:reset()
  local arg = {...}

  -- loading map
  local map_file
  if arg[1] == nil then
    map_file = io.open(self.map_save_path, "r")
  else
    map_file = io.open(self.map_pathes[arg[1]], "r")
  end
  local json_str = map_file:read()
  map_file:close()
  local tmp_map = map_convertor:decode(json_str)
  self.map.domains = tmp_map.domains
  self.map.networks = tmp_map.networks
  self.map.hosts = tmp_map.hosts
  if arg[1] ~= nil then
    local now = os.time()
    self.map.start_time = now - now % 60
  end
  game.started = true
end

return game