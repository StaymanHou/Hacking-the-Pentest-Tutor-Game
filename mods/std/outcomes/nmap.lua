if Outcome == nil then
  Outcome = require "lib.Outcome"
end
if dns_resolver == nil then
  dns_resolver = require "lib.dns_resolver"
end

tcp_port_reachability = Outcome.new("discover open tcp port")
tcp_port_reachability.eval = function (target)
  if target.host.state == Host.State.Undiscovered then
    target.host:set_state(Host.State.Discovered)
  end
  local closed_port_number = 65535
  local result_str = ""
  for _, addr_port_listenning_service in ipairs(target.host.addr_port_listenning_services) do
    if addr_port_listenning_service.network_interface.ip == target.ip and addr_port_listenning_service.protocol == "tcp" then
      result_str = result_str .. addr_port_listenning_service.port .. "/tcp\topen\n"
      closed_port_number = closed_port_number - 1
    end
  end
  if closed_port_number == 65535 then
    return "All " .. closed_port_number .. " scanned ports on " .. target.ip .. " are closed\n"
  else
    return "Not shown: " .. closed_port_number .. " closed ports\n" .. "PORT\tSTATE\n" .. result_str
  end
end

tcp_port_reachability_service_version = Outcome.new("discover open tcp port and service version")
tcp_port_reachability_service_version.eval = function (target)
  if target.host.state == Host.State.Undiscovered then
    target.host:set_state(Host.State.Discovered)
  end
  local closed_port_number = 65535
  local result_str = ""
  for _, addr_port_listenning_service in ipairs(target.host.addr_port_listenning_services) do
    if addr_port_listenning_service.network_interface.ip == target.ip and addr_port_listenning_service.protocol == "tcp" then
      result_str = result_str .. addr_port_listenning_service.port .. "/tcp\topen\t" .. addr_port_listenning_service.service.name .. "\t" .. addr_port_listenning_service.service.version .. "\n"
      closed_port_number = closed_port_number - 1
    end
  end
  if closed_port_number == 65535 then
    return "All " .. closed_port_number .. " scanned ports on " .. target.ip .. " are closed\n"
  else
    return "Not shown: " .. closed_port_number .. " closed ports\n" .. "PORT\tSTATE\tSERVICE\tVERSION\n" .. result_str
  end
end

detect_os_version = Outcome.new("detect os version")
detect_os_version.eval = function (target)
  target.host:set_state(Host.State.Discovered)
  return "OS details: " .. target.host.os.name .. " " .. target.host.os.version .. "\n"
end
