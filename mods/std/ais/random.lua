if AI == nil then
  AI = require "lib.AI"
end

random_ai = AI.new("random")
random_ai.suggest = function (map)
  function get_avaliable_action_targets(src_host)
    local avaliable_action_targets = {}
    for _,tool in ipairs(src_host.tools) do
      for _,action in ipairs(tool.available_actions) do
        local avaliable_targets = action:get_avaliable_targets(map)
        for _,target in ipairs(avaliable_targets) do
          avaliable_action_targets[#(avaliable_action_targets)+1] = {
            action = action,
            target = target
          }
        end
      end
    end
    return avaliable_action_targets
  end

  local avaliable_src_host_action_targets = {}
  for _,src_host in ipairs(map.hosts) do
    if src_host.state == Host.State.Mine or src_host.state == Host.State.Compromised or src_host.state == Host.State.RootAccess then
      local avaliable_action_targets = get_avaliable_action_targets(src_host)
      for _,avaliable_action_target in ipairs(avaliable_action_targets) do
        avaliable_src_host_action_targets[#(avaliable_src_host_action_targets)+1] = {
          host = src_host,
          action = avaliable_action_target.action,
          target = avaliable_action_target.target
        }
      end
    end
  end

  local random_src_host_action_target = avaliable_src_host_action_targets[ math.random( #avaliable_src_host_action_targets ) ]
  return random_src_host_action_target.host.hostname .. " >> " .. random_src_host_action_target.action.name .. " " .. random_src_host_action_target.target
end
