require "lib.util"
if Action == nil then
  Action = require "lib.Action"
end
if Outcome == nil then
  Outcome = require "lib.Outcome"
end

local omp_scan = Action.new("omp")
omp_scan.outcome = Outcome.lookup("discover open service vulnerabilities")
omp_scan.run = function (self, src_host, target_port_and_host)
  local splitted_target_port_and_host = target_port_and_host:split(" ")
  local target = {}
  for i,str in ipairs(splitted_target_port_and_host) do
    if str == "-h" then
      target.host_str = splitted_target_port_and_host[i+1]
    elseif str == "-p" then
      target.port_str = splitted_target_port_and_host[i+1]
    end
  end
  if target.host_str == nil or target.port_str == nil then
    return "Invalid command"
  end
  target.host = src_host:get_reachable_host_by_ip(target.host_str)
  if target.host == nil then
    return "failed to connect, port " .. target.port_str .. " host " .. target.host_str
  end
  target.port = tonumber(target.port_str)
  local flag_ssh_port_open_n_service_listenning = false
  for _, addr_port_listenning_service in ipairs(target.host.addr_port_listenning_services) do
    if addr_port_listenning_service.network_interface.ip == target.host_str and addr_port_listenning_service.protocol == "tcp" and addr_port_listenning_service.port == target.port then
      target.service = addr_port_listenning_service.service
      flag_ssh_port_open_n_service_listenning = true
      break
    end
  end
  if flag_ssh_port_open_n_service_listenning == false then
    return "failed to connect, port " .. target.port_str .. " host " .. target.host_str
  end
  return self.outcome.eval(target)
end
