if Action == nil then
  Action = require "lib.Action"
end
if Outcome == nil then
  Outcome = require "lib.Outcome"
end
if Configuration == nil then
  Configuration = require "lib.Configuration"
end

local conf_ruwp = Configuration.lookup("root user weak password")
local conf_rrule = Configuration.lookup("remote root user login enabled")
local conf_rlwpe = Configuration.lookup("remote login with password enabled")

local medusa_ssh_root = Action.new("medusa -M ssh -u root -P top_passwords.txt -h")
medusa_ssh_root.outcome = Outcome.lookup("get ssh root login")
medusa_ssh_root.target_configurations[#(medusa_ssh_root.target_configurations)+1] = conf_ruwp
medusa_ssh_root.target_configurations[#(medusa_ssh_root.target_configurations)+1] = conf_rrule
medusa_ssh_root.target_configurations[#(medusa_ssh_root.target_configurations)+1] = conf_rlwpe
medusa_ssh_root.run = function (self, src_host, target_ip)
  local result_str = "Medusa V2.0 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks <jmk@foofus.net>\n"
  local target_host = src_host:get_reachable_host_by_ip(target_ip)
  if target_host == nil then
    return result_str .. "\nNOTICE: ssh.mod: failed to connect, port 22 was not open on " .. target_ip
  end
  local flag_ssh_port_open_n_service_listenning = false
  for _, addr_port_listenning_service in ipairs(target_host.addr_port_listenning_services) do
    if addr_port_listenning_service.network_interface.ip == target_ip and addr_port_listenning_service.protocol == "tcp" and addr_port_listenning_service.port == 22 and addr_port_listenning_service.service.name == "OpenSSH" then
      flag_ssh_port_open_n_service_listenning = true
      break
    end
  end
  if flag_ssh_port_open_n_service_listenning == false then
    return result_str .. "\nNOTICE: ssh.mod: failed to connect, port 22 was not open on " .. target_ip
  end
  target = { host = target_host, ip = target_ip }
  return result_str .. self.outcome.eval(target)
end

medusa_ssh_root.get_avaliable_targets = function (self, observed_map)
  local targets = {}
  for _,host in ipairs(observed_map.hosts) do
    for _,nic in ipairs(host.network_interfaces) do
      targets[#(targets)+1] = nic.ip
    end
  end
  return targets
end