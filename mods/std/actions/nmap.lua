require "lib.util"
if Action == nil then
  Action = require "lib.Action"
end
if Outcome == nil then
  Outcome = require "lib.Outcome"
end

function avaliable_host_targets(self, observed_map)
  local targets = {}
  for _,host in ipairs(observed_map.hosts) do
    for _,nic in ipairs(host.network_interfaces) do
      targets[#(targets)+1] = nic.ip
    end
  end
  return targets
end

nmap_ping_scan = Action.new("nmap -sn")
nmap_ping_scan.outcome = Outcome.lookup("discover reachable host")
nmap_ping_scan.run = function (self, src_host, target_ip_or_cidr)
  local CIDR = target_ip_or_cidr
  if #(CIDR:split("/")) == 1 then
    CIDR = CIDR .. "/32"
  end
  local splited_cidr = CIDR:split("/")
  local routing_prefix_bits = tonumber(splited_cidr[2])
  local network_prefix = get_network_prefix(splited_cidr[1], routing_prefix_bits)
  local hosts_nubmer = math.pow(2, 32-routing_prefix_bits)
  local result_string = ""
  local reachable_host_number = 0
  for i=0,hosts_nubmer-1 do
    local target_ip = number_to_ip(network_prefix+i)
    local target_host = src_host:get_reachable_host_by_ip(target_ip)
    if target_host then
      target = { host = target_host, ip = target_ip }
      self.outcome.eval(target)
      result_string = result_string .. "Nmap scan report for " .. target_ip .. "\nHost is up (*.***s latency).\n"
      reachable_host_number = reachable_host_number + 1
    end
  end
  return result_string .. hosts_nubmer .. " IP address (" .. reachable_host_number .. " hosts up) scanned\n"
end
nmap_ping_scan.get_avaliable_targets = avaliable_host_targets

nmap_tcp_port_scan = Action.new("nmap -sT")
nmap_tcp_port_scan.outcome = Outcome.lookup("discover open tcp port")
nmap_tcp_port_scan.run = function (self, src_host, target_ip_or_cidr)
  local CIDR = target_ip_or_cidr
  if #(CIDR:split("/")) == 1 then
    CIDR = CIDR .. "/32"
  end
  local splited_cidr = CIDR:split("/")
  local routing_prefix_bits = tonumber(splited_cidr[2])
  local network_prefix = get_network_prefix(splited_cidr[1], routing_prefix_bits)
  local hosts_nubmer = math.pow(2, 32-routing_prefix_bits)
  local result_string = ""
  local reachable_host_number = 0
  for i=0,hosts_nubmer-1 do
    local target_ip = number_to_ip(network_prefix+i)
    local target_host = src_host:get_reachable_host_by_ip(target_ip)
    if target_host then
      target = { host = target_host, ip = target_ip }
      local port_result = self.outcome.eval(target)
      result_string = result_string .. "Nmap scan report for " .. target_ip .. "\nHost is up (*.***s latency).\n" .. port_result
      reachable_host_number = reachable_host_number + 1
    end
  end
  return result_string .. "Nmap done: " .. hosts_nubmer .. " IP address (" .. reachable_host_number .. " hosts up) scanned\n"
end
nmap_tcp_port_scan.get_avaliable_targets = avaliable_host_targets

nmap_tcp_port_service_version_scan = Action.new("nmap -sT -sV")
nmap_tcp_port_service_version_scan.outcome = Outcome.lookup("discover open tcp port and service version")
nmap_tcp_port_service_version_scan.run = function (self, src_host, target_ip_or_cidr)
  local CIDR = target_ip_or_cidr
  if #(CIDR:split("/")) == 1 then
    CIDR = CIDR .. "/32"
  end
  local splited_cidr = CIDR:split("/")
  local routing_prefix_bits = tonumber(splited_cidr[2])
  local network_prefix = get_network_prefix(splited_cidr[1], routing_prefix_bits)
  local hosts_nubmer = math.pow(2, 32-routing_prefix_bits)
  local result_string = ""
  local reachable_host_number = 0
  for i=0,hosts_nubmer-1 do
    local target_ip = number_to_ip(network_prefix+i)
    local target_host = src_host:get_reachable_host_by_ip(target_ip)
    if target_host then
      target = { host = target_host, ip = target_ip }
      local port_service_result = self.outcome.eval(target)
      result_string = result_string .. "Nmap scan report for " .. target_ip .. "\nHost is up (*.***s latency).\n" .. port_service_result
      reachable_host_number = reachable_host_number + 1
    end
  end
  return result_string .. "Nmap done: " .. hosts_nubmer .. " IP address (" .. reachable_host_number .. " hosts up) scanned\n"
end
nmap_tcp_port_service_version_scan.get_avaliable_targets = avaliable_host_targets

nmap_os_version_detection = Action.new("nmap -O")
nmap_os_version_detection.outcome = Outcome.lookup("detect os version")
nmap_os_version_detection.run = function (self, src_host, target_ip_or_cidr)
  local CIDR = target_ip_or_cidr
  if #(CIDR:split("/")) == 1 then
    CIDR = CIDR .. "/32"
  end
  local splited_cidr = CIDR:split("/")
  local routing_prefix_bits = tonumber(splited_cidr[2])
  local network_prefix = get_network_prefix(splited_cidr[1], routing_prefix_bits)
  local hosts_nubmer = math.pow(2, 32-routing_prefix_bits)
  local result_string = ""
  local reachable_host_number = 0
  for i=0,hosts_nubmer-1 do
    local target_ip = number_to_ip(network_prefix+i)
    local target_host = src_host:get_reachable_host_by_ip(target_ip)
    if target_host then
      target = { host = target_host, ip = target_ip }
      os_result = self.outcome.eval(target)
      result_string = result_string .. "Nmap scan report for " .. target_ip .. "\nHost is up (*.***s latency).\n" .. os_result
      reachable_host_number = reachable_host_number + 1
    end
  end
  return result_string .. hosts_nubmer .. " IP address (" .. reachable_host_number .. " hosts up) scanned\n"
end
nmap_os_version_detection.get_avaliable_targets = avaliable_host_targets
