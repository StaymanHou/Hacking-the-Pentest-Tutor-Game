require "lunit"
local Host = require "lib.Host"
local Os = require "lib.Os"
local Rootkit = require "lib.Rootkit"
local Virus = require "lib.Virus"
local Tool = require "lib.Tool"
local Action = require "lib.Action"
local NetworkInterface = require "lib.NetworkInterface"
local Network = require "lib.Network"
local Service = require "lib.Service"
local Configuration = require "lib.Configuration"
local Outcome = require "lib.Outcome"

module( "Host_testcase", package.seeall, lunit.testcase )

function test_new_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  assert_not_nil( Host.new("targethost", Host.State.Undiscovered, o, Host.Type.Server) )
  assert_not_nil( Host.new("myhost", Host.State.Mine, os, Host.Type.Server) ) 
end

function test_set_state_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  host = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  host:set_state(Host.State.RootAccess)
  assert_equal( Host.State.RootAccess, host.state )
end

function test_install_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  host = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)

  Rootkit.rootkit_name_version_map = {}
  Rootkit.all = {}
  rootkit = Rootkit.new("Stayman Rootkit", "0.0.1")

  Virus.virus_name_version_map = {}
  Virus.all = {}
  virus = Virus.new("Stayman Virus", "0.0.1")

  Tool.tool_name_map = {}
  Tool.all = {}
  tool = Tool.new("Stayman LockPick")

  host:install(rootkit)
  host:install(virus)
  host:install(tool)

  assert_equal( 1, #(host.rootkits) )
  assert_equal( 1, #(host.viruses) )
  assert_equal( 1, #(host.tools) )
  assert_equal( rootkit, host.rootkits[1] )
  assert_equal( virus, host.viruses[1] )
  assert_equal( tool, host.tools[1] )
end

function test_attach_network_interface_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  host = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)

  network_interface = NetworkInterface.new()

  host:attach_network_interface(network_interface)
  assert_equal( 1, #(host.network_interfaces) )
  assert_equal( network_interface, host.network_interfaces[1] )
  assert_equal( host, network_interface.host )
end

function test_add_service_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  host = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)

  Service.service_name_version_map = {}
  Service.all = {}
  service = Service.new("Stayman ServEngine", "0.0.1")

  host:add_service(service)
  assert_equal( 1, #(host.services) )
  assert_equal( service, host.services[1] )
  assert_equal( service, host:add_service(service) )
end

function test_add_configuration_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  host = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)

  Configuration.configuration_name_version_map = {}
  Configuration.all = {}
  configuration = Configuration.new("weak password")

  host:add_configuration(configuration)
  assert_equal( 1, #(host.configurations) )
  assert_equal( configuration, host.configurations[1] )
  assert_equal( configuration, host:add_configuration(configuration) )
end

function test_add_addr_port_listenning_service_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  host = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)

  Service.service_name_version_map = {}
  Service.all = {}
  service = Service.new("Stayman ServEngine", "0.0.1")
  host:add_service(service)

  network_interface = NetworkInterface.new()
  host:attach_network_interface(network_interface)

  host:add_addr_port_listenning_service(network_interface, "tcp", 80, service)
  assert_equal( 1, #(host.addr_port_listenning_services) )
  assert_equal( network_interface, host.addr_port_listenning_services[1].network_interface)
  assert_equal( "tcp", host.addr_port_listenning_services[1].protocol)
  assert_equal( 80, host.addr_port_listenning_services[1].port)
  assert_equal( service, host.addr_port_listenning_services[1].service)
end

function test_reachable_hosts_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  myhost = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  targethost = Host.new("targethost", Host.State.Discovered, os, Host.Type.Server)
  hiddenhost = Host.new("hiddenhost", Host.State.Undiscovered, os, Host.Type.Server)

  network = Network.new("192.168.1.0/24")
  hiddennetwork = Network.new("192.168.2.0/24")

  network_interface_for_myhost = NetworkInterface.new()
  network_interface_for_myhost:assign(network, "192.168.1.100")
  myhost:attach_network_interface(network_interface_for_myhost)

  network_interface_for_targethost = NetworkInterface.new()
  network_interface_for_targethost:assign(network, "192.168.1.101")
  targethost:attach_network_interface(network_interface_for_targethost)

  network_interface_for_hiddenhost = NetworkInterface.new()
  network_interface_for_hiddenhost:assign(hiddennetwork, "192.168.2.100")
  hiddenhost:attach_network_interface(network_interface_for_hiddenhost)

  assert_equal( 3, #(myhost:reachable_hosts()) )
  assert_equal( myhost, myhost:reachable_hosts()[1] )
  assert_equal( myhost, myhost:reachable_hosts()[2] )
  assert_equal( targethost, myhost:reachable_hosts()[3] )
end

function test_get_reachable_host_by_ip_method()
  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  myhost = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  targethost = Host.new("targethost", Host.State.Discovered, os, Host.Type.Server)
  hiddenhost = Host.new("hiddenhost", Host.State.Undiscovered, os, Host.Type.Server)

  network = Network.new("192.168.1.0/24")
  hiddennetwork = Network.new("192.168.2.0/24")

  network_interface_for_myhost = NetworkInterface.new()
  network_interface_for_myhost:assign(network, "192.168.1.100")
  myhost:attach_network_interface(network_interface_for_myhost)

  network_interface_for_targethost = NetworkInterface.new()
  network_interface_for_targethost:assign(network, "192.168.1.101")
  targethost:attach_network_interface(network_interface_for_targethost)

  network_interface_for_hiddenhost = NetworkInterface.new()
  network_interface_for_hiddenhost:assign(hiddennetwork, "192.168.2.100")
  hiddenhost:attach_network_interface(network_interface_for_hiddenhost)

  assert_equal( myhost, myhost:get_reachable_host_by_ip("127.0.0.1") )
  assert_equal( myhost, myhost:get_reachable_host_by_ip("192.168.1.100") )
  assert_equal( targethost, myhost:get_reachable_host_by_ip("192.168.1.101") )
  assert_nil( myhost:get_reachable_host_by_ip("192.168.2.100") )
end

function test_run_method_self_targeted()
  Outcome.outcome_name_map = {}
  Outcome.all = {}
  outcome = Outcome.new("root", "gain root access of the target directly")
  outcome.eval = function (target_host)
    target_host:set_state(Host.State.RootAccess)
  end

  Action.action_name_map = {}
  Action.all = {}
  action = Action.new("Stayman Exploit")
  action.outcome = outcome

  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  myhost = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  targethost = Host.new("targethost", Host.State.Discovered, os, Host.Type.Server)
  hiddenhost = Host.new("hiddenhost", Host.State.Undiscovered, os, Host.Type.Server)

  network = Network.new("192.168.1.0/24")
  hiddennetwork = Network.new("192.168.2.0/24")

  network_interface_for_myhost = NetworkInterface.new()
  network_interface_for_myhost:assign(network, "192.168.1.100")
  myhost:attach_network_interface(network_interface_for_myhost)

  network_interface_for_targethost = NetworkInterface.new()
  network_interface_for_targethost:assign(network, "192.168.1.101")
  targethost:attach_network_interface(network_interface_for_targethost)

  network_interface_for_hiddenhost = NetworkInterface.new()
  network_interface_for_hiddenhost:assign(hiddennetwork, "192.168.2.100")
  hiddenhost:attach_network_interface(network_interface_for_hiddenhost)

  myhost:run(action, myhost)
  assert_equal( Host.State.RootAccess, myhost.state )
end

function test_run_method_target_other()
  Outcome.outcome_name_map = {}
  Outcome.all = {}
  outcome = Outcome.new("root", "gain root access of the target directly")
  outcome.eval = function (target_host)
    target_host:set_state(Host.State.RootAccess)
  end

  Action.action_name_map = {}
  Action.all = {}
  action = Action.new("Stayman Exploit")
  action.outcome = outcome

  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  myhost = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  targethost = Host.new("targethost", Host.State.Discovered, os, Host.Type.Server)
  hiddenhost = Host.new("hiddenhost", Host.State.Undiscovered, os, Host.Type.Server)

  network = Network.new("192.168.1.0/24")
  hiddennetwork = Network.new("192.168.2.0/24")

  network_interface_for_myhost = NetworkInterface.new()
  network_interface_for_myhost:assign(network, "192.168.1.100")
  myhost:attach_network_interface(network_interface_for_myhost)

  network_interface_for_targethost = NetworkInterface.new()
  network_interface_for_targethost:assign(network, "192.168.1.101")
  targethost:attach_network_interface(network_interface_for_targethost)

  network_interface_for_hiddenhost = NetworkInterface.new()
  network_interface_for_hiddenhost:assign(hiddennetwork, "192.168.2.100")
  hiddenhost:attach_network_interface(network_interface_for_hiddenhost)

  myhost:run(action, targethost)
  assert_equal( Host.State.RootAccess, targethost.state )
end

function test_run_method_target_unreachable()
  Outcome.outcome_name_map = {}
  Outcome.all = {}
  outcome = Outcome.new("root", "gain root access of the target directly")
  outcome.eval = function (target_host)
    target_host:set_state(Host.State.RootAccess)
  end

  Action.action_name_map = {}
  Action.all = {}
  action = Action.new("Stayman Exploit")
  action.outcome = outcome

  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  myhost = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  targethost = Host.new("targethost", Host.State.Discovered, os, Host.Type.Server)
  hiddenhost = Host.new("hiddenhost", Host.State.Undiscovered, os, Host.Type.Server)

  network = Network.new("192.168.1.0/24")
  hiddennetwork = Network.new("192.168.2.0/24")

  network_interface_for_myhost = NetworkInterface.new()
  network_interface_for_myhost:assign(network, "192.168.1.100")
  myhost:attach_network_interface(network_interface_for_myhost)

  network_interface_for_targethost = NetworkInterface.new()
  network_interface_for_targethost:assign(network, "192.168.1.101")
  targethost:attach_network_interface(network_interface_for_targethost)

  network_interface_for_hiddenhost = NetworkInterface.new()
  network_interface_for_hiddenhost:assign(hiddennetwork, "192.168.2.100")
  hiddenhost:attach_network_interface(network_interface_for_hiddenhost)

  myhost:run(action, hiddenhost)
  assert_not_equal( Host.State.RootAccess, hiddenhost.state )
end

function test_run_against_cidr_method_self_targeted()
  Outcome.outcome_name_map = {}
  Outcome.all = {}
  outcome = Outcome.new("root", "gain root access of the target directly")
  outcome.eval = function (target_host)
    target_host:set_state(Host.State.RootAccess)
  end

  Action.action_name_map = {}
  Action.all = {}
  action = Action.new("Stayman Exploit")
  action.outcome = outcome

  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  myhost = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  targethost = Host.new("targethost", Host.State.Discovered, os, Host.Type.Server)
  hiddenhost = Host.new("hiddenhost", Host.State.Undiscovered, os, Host.Type.Server)

  network = Network.new("192.168.1.0/24")
  hiddennetwork = Network.new("192.168.2.0/24")

  network_interface_for_myhost = NetworkInterface.new()
  network_interface_for_myhost:assign(network, "192.168.1.100")
  myhost:attach_network_interface(network_interface_for_myhost)

  network_interface_for_targethost = NetworkInterface.new()
  network_interface_for_targethost:assign(network, "192.168.1.101")
  targethost:attach_network_interface(network_interface_for_targethost)

  network_interface_for_hiddenhost = NetworkInterface.new()
  network_interface_for_hiddenhost:assign(hiddennetwork, "192.168.2.100")
  hiddenhost:attach_network_interface(network_interface_for_hiddenhost)

  myhost:run_against_cidr(action, "127.0.0.1/32")
  assert_equal( Host.State.RootAccess, myhost.state )
end

function test_run_against_cidr_method_target_other()
  Outcome.outcome_name_map = {}
  Outcome.all = {}
  outcome = Outcome.new("root", "gain root access of the target directly")
  outcome.eval = function (target_host)
    target_host:set_state(Host.State.RootAccess)
  end

  Action.action_name_map = {}
  Action.all = {}
  action = Action.new("Stayman Exploit")
  action.outcome = outcome

  Os.os_name_version_map = {}
  Os.all = {}
  os = Os.new("Stayman OS", "0.0.1")
  myhost = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  targethost = Host.new("targethost", Host.State.Discovered, os, Host.Type.Server)
  hiddenhost = Host.new("hiddenhost", Host.State.Undiscovered, os, Host.Type.Server)

  network = Network.new("192.168.1.0/24")
  hiddennetwork = Network.new("192.168.2.0/24")

  network_interface_for_myhost = NetworkInterface.new()
  network_interface_for_myhost:assign(network, "192.168.1.100")
  myhost:attach_network_interface(network_interface_for_myhost)

  network_interface_for_targethost = NetworkInterface.new()
  network_interface_for_targethost:assign(network, "192.168.1.101")
  targethost:attach_network_interface(network_interface_for_targethost)

  network_interface_for_hiddenhost = NetworkInterface.new()
  network_interface_for_hiddenhost:assign(hiddennetwork, "192.168.2.100")
  hiddenhost:attach_network_interface(network_interface_for_hiddenhost)

  myhost:run_against_cidr(action, "192.168.1.0/24")
  assert_equal( Host.State.RootAccess, myhost.state )
  assert_equal( Host.State.RootAccess, targethost.state )
end
