require "lunit"
if Vulnerability == nil then
  Vulnerability = require "lib.Vulnerability"
end
if Os == nil then
  Os = require "lib.Os"
end
if Configuration == nil then
  Configuration = require "lib.Configuration"
end
if Service == nil then
  Service = require "lib.Service"
end
Host = require "lib.Host"
Rootkit = require "lib.Rootkit"
Virus = require "lib.Virus"
Tool = require "lib.Tool"
Action = require "lib.Action"
NetworkInterface = require "lib.NetworkInterface"
Network = require "lib.Network"
Domain = require "lib.Domain"
Outcome = require "lib.Outcome"
map = require "map"
map_convertor = require "lib.map_convertor"

module( "map_convertor_testcase", package.seeall, lunit.testcase )

-- load read data
  -- clean up
Vulnerability.vuln_id_map = {}
Vulnerability.all = {}
Os.os_name_version_map = {}
Os.all = {}
Configuration.configuration_name_map = {}
Configuration.all = {}
Service.service_name_version_map = {}
Service.all = {}
  -- load 
Vulnerability.load()
Os.load()
Configuration.load()
Service.load()

-- make mod doubles
Outcome.outcome_name_map = {}
Outcome.all = {}
outcome = Outcome.new("root", "gain root access of the target directly")
outcome.eval = function (target_host)
  target_host:set_state(Host.State.RootAccess)
end

Action.action_name_map = {}
Action.all = {}
action = Action.new("Stayman Exploit")
action.outcome = outcome

Tool.tool_name_map = {}
Tool.all = {}
tool = Tool.new("Stayman LockPick")
tool:add_action(action)

Rootkit.rootkit_name_version_map = {}
Rootkit.all = {}
rootkit = Rootkit.new("Stayman Rootkit", "0.0.1")

Virus.virus_name_version_map = {}
Virus.all = {}
virus = Virus.new("Stayman Virus", "0.0.1")

function test_encode_function_integrated_data()
  map:reset()

  -- test map
    -- build domains
  Domain.domain_name_type_map = {}
  Domain.all = {}
  local mydomain = Domain.new("stayman.com", "A", "192.168.1.100")
  local targetdomain = Domain.new("target.com", "A", "192.168.1.101")

  map.domains[#(map.domains)+1] = mydomain
  map.domains[#(map.domains)+1] = targetdomain

    -- build networks
  local network = Network.new("192.168.1.0/24")
  local hiddennetwork = Network.new("192.168.2.0/24")

    -- build hosts
  local os = Os.lookup("Linux", "3.17")
  local myhost = Host.new("myhost", Host.State.Mine, os, Host.Type.Server)
  myhost:install(tool)
  local targethost = Host.new("targethost", Host.State.Discovered, os, Host.Type.Server)
  local target_host_apache_service = targethost:add_service(Service.lookup("Apache", "2.4.12"))
  local target_host_weak_password_conf = targethost:add_configuration(Configuration.lookup("root user weak password"))
  local hiddenhost = Host.new("hiddenhost", Host.State.Undiscovered, os, Host.Type.Server)
  hiddenhost:install(rootkit)
  hiddenhost:install(virus)

  map.hosts[#(map.hosts)+1] = myhost
  map.hosts[#(map.hosts)+1] = targethost
  map.hosts[#(map.hosts)+1] = hiddenhost

  local network_interface_for_myhost = NetworkInterface.new()
  network_interface_for_myhost:assign(network, "192.168.1.100")
  myhost:attach_network_interface(network_interface_for_myhost)

  local network_interface_for_targethost = NetworkInterface.new()
  network_interface_for_targethost:assign(network, "192.168.1.101")
  targethost:attach_network_interface(network_interface_for_targethost)
  targethost:add_addr_port_listenning_service(network_interface_for_targethost, "tcp", 80, target_host_apache_service)

  local network_interface_for_hiddenhost = NetworkInterface.new()
  network_interface_for_hiddenhost:assign(hiddennetwork, "192.168.2.100")
  hiddenhost:attach_network_interface(network_interface_for_hiddenhost)

  map.networks[#(map.networks)+1] = network
  map.networks[#(map.networks)+1] = hiddennetwork

  -- assertions
  assert_equal( '{"domains":[{"name":"stayman.com","type":"A","value":"192.168.1.100"},{"name":"target.com","type":"A","value":"192.168.1.101"}],"hosts":[{"addr_port_listenning_services":[],"configurations":[],"hostname":"myhost","network_interfaces":[{"ip":"192.168.1.100","network_index":1}],"os":{"name":"Linux","version":"3.17"},"rootkits":[],"services":[],"state":0,"tools":[{"name":"Stayman LockPick"}],"type":0,"viruses":[]},{"addr_port_listenning_services":[{"network_interface_index":1,"port":80,"protocol":"tcp","service_index":1}],"configurations":[{"name":"root user weak password"}],"hostname":"targethost","network_interfaces":[{"ip":"192.168.1.101","network_index":1}],"os":{"name":"Linux","version":"3.17"},"rootkits":[],"services":[{"name":"Apache","version":"2.4.12"}],"state":2,"tools":[],"type":0,"viruses":[]},{"addr_port_listenning_services":[],"configurations":[],"hostname":"hiddenhost","network_interfaces":[{"ip":"192.168.2.100","network_index":2}],"os":{"name":"Linux","version":"3.17"},"rootkits":[{"name":"Stayman Rootkit","version":"0.0.1"}],"services":[],"state":1,"tools":[],"type":0,"viruses":[{"name":"Stayman Virus","version":"0.0.1"}]}],"networks":[{"CIDR":"192.168.1.0/24"},{"CIDR":"192.168.2.0/24"}]}', map_convertor:encode(map) )
end

function test_decode_function_integrated_data()
  Domain.domain_name_type_map = {}
  Domain.all = {}

  tmp_map = map_convertor:decode('{"domains":[{"name":"stayman.com","type":"A","value":"192.168.1.100"},{"name":"target.com","type":"A","value":"192.168.1.101"}],"hosts":[{"addr_port_listenning_services":[],"configurations":[],"hostname":"myhost","network_interfaces":[{"ip":"192.168.1.100","network_index":1}],"os":{"name":"Linux","version":"3.17"},"rootkits":[],"services":[],"state":0,"tools":[{"name":"Stayman LockPick"}],"type":0,"viruses":[]},{"addr_port_listenning_services":[{"network_interface_index":1,"port":80,"protocol":"tcp","service_index":1}],"configurations":[{"name":"root user weak password"}],"hostname":"targethost","network_interfaces":[{"ip":"192.168.1.101","network_index":1}],"os":{"name":"Linux","version":"3.17"},"rootkits":[],"services":[{"name":"Apache","version":"2.4.12"}],"state":2,"tools":[],"type":0,"viruses":[]},{"addr_port_listenning_services":[],"configurations":[],"hostname":"hiddenhost","network_interfaces":[{"ip":"192.168.2.100","network_index":2}],"os":{"name":"Linux","version":"3.17"},"rootkits":[{"name":"Stayman Rootkit","version":"0.0.1"}],"services":[],"state":1,"tools":[],"type":0,"viruses":[{"name":"Stayman Virus","version":"0.0.1"}]}],"networks":[{"CIDR":"192.168.1.0/24"},{"CIDR":"192.168.2.0/24"}]}')
  -- map assertions
    -- assert domains
  assert_equal('stayman.com', tmp_map.domains[1].name)
  assert_equal('A', tmp_map.domains[1].type)
  assert_equal('192.168.1.100', tmp_map.domains[1].value)
  assert_equal('target.com', tmp_map.domains[2].name)
  assert_equal('A', tmp_map.domains[2].type)
  assert_equal('192.168.1.101', tmp_map.domains[2].value)

    -- assert networks
  assert_equal('192.168.1.0/24', tmp_map.networks[1].CIDR)
  assert_equal('192.168.2.0/24', tmp_map.networks[2].CIDR)

    -- assert hosts
  local os = Os.lookup("Linux", "3.17")
  local myhost = tmp_map.hosts[1]
  local targethost = tmp_map.hosts[2]
  local hiddenhost = tmp_map.hosts[3]
  assert_equal("myhost", myhost.hostname)
  assert_equal(Host.State.Mine, myhost.state)
  assert_equal(os, myhost.os)
  assert_equal(Host.Type.Server, myhost.type)
  assert_equal(1, #(myhost.tools))
  assert_equal(tool, myhost.tools[1])
  assert_equal("targethost", targethost.hostname)
  assert_equal(Host.State.Discovered, targethost.state)
  assert_equal(os, targethost.os)
  assert_equal(Host.Type.Server, targethost.type)
  assert_equal(1, #(targethost.services))
  assert_equal(Service.lookup("Apache", "2.4.12"), targethost.services[1])
  assert_equal(1, #(targethost.configurations))
  assert_equal(Configuration.lookup("root user weak password"), targethost.configurations[1])
  assert_equal("hiddenhost", hiddenhost.hostname)
  assert_equal(Host.State.Undiscovered, hiddenhost.state)
  assert_equal(os, hiddenhost.os)
  assert_equal(Host.Type.Server, hiddenhost.type)
  assert_equal(1, #(hiddenhost.rootkits))
  assert_equal(rootkit, hiddenhost.rootkits[1])
  assert_equal(1, #(hiddenhost.viruses))
  assert_equal(virus, hiddenhost.viruses[1])

  assert_equal(1, #(myhost.network_interfaces))
  assert_equal(tmp_map.networks[1], myhost.network_interfaces[1].network)
  assert_equal("192.168.1.100", myhost.network_interfaces[1].ip)
  assert_equal(myhost, myhost.network_interfaces[1].host)

  assert_equal(1, #(targethost.network_interfaces))
  assert_equal(tmp_map.networks[1], targethost.network_interfaces[1].network)
  assert_equal("192.168.1.101", targethost.network_interfaces[1].ip)
  assert_equal(targethost, targethost.network_interfaces[1].host)
  assert_equal(1, #(targethost.addr_port_listenning_services))
  assert_equal(targethost.network_interfaces[1], targethost.addr_port_listenning_services[1].network_interface)
  assert_equal("tcp", targethost.addr_port_listenning_services[1].protocol)
  assert_equal(80, targethost.addr_port_listenning_services[1].port)
  assert_equal(targethost.services[1], targethost.addr_port_listenning_services[1].service)

  assert_equal(1, #(hiddenhost.network_interfaces))
  assert_equal(tmp_map.networks[2], hiddenhost.network_interfaces[1].network)
  assert_equal("192.168.2.100", hiddenhost.network_interfaces[1].ip)
  assert_equal(hiddenhost, hiddenhost.network_interfaces[1].host)
end
