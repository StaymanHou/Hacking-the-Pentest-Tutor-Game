#!/usr/bin/lua
DEBUG = true

-- lib
local map_convertor = require "lib.map_convertor"

-- models
local Host = require "lib.Host"

-- game
local game = {}
game.map = {}
game.map_save_path = "save/map.json"
game.map_path = {
  tutorial = "maps/tutorial.json",
  example = "maps/example.json"
}
game.started = false

function game:exit()
  local exit_msg
  if game.started then
    exit_msg = "Save and quit the game. Are you sure? [y]/n"
  else
    exit_msg = "Quit the game. Are you sure? [y]/n"
  end
  print(exit_msg)
  input = io.read()
  if input == "" or input == "y" then
    if game.started then self:save_map() end
    print("See you soon. Bye, pentester.")
    os.exit()
  end
end

function game:save_map()
  print("saving the game ...")
  local json_str = map_convertor:encode(self.map)
  local map_file = io.open(self.map_save_path, "w")
  map_file:write(json_str)
  map_file:close()
  print("Game saved")
end

function game:load_map(...)
  local arg = {...}
  print("loading the game ...")
  local map_file
  if arg[1] == nil then
    map_file = io.open(self.map_save_path, "r")
  else
    map_file = io.open(self.map_path[arg[1]], "r")
  end
  local json_str = map_file:read()
  map_file:close()
  self.map = map_convertor:decode(json_str)
  if arg[1] ~= nil then
    local now = os.time()
    self.map.start_time = now - now % 60
  end
  game.started = true
  print("Game loaded")
end

-- commands
local commands = {}

if DEBUG then
  commands.debug = {
    description = "debug command for debugging the command dispatcher",
    help = "help text",
    exec = function (...)
      local arg = {...}
      print("debug ",unpack(arg))
    end
  }
end

function invalid_command()
  print 'Invalid command. use `help` to view the help below'
  commands.help.exec()
end

commands.help = {
  description = "print the help text. `help [command_name]`",
  help = "Print all commands available. Or the help text of a command if command name specified.\nUsage: help [command_name]",
  exec = function (...)
    local arg = {...}
    if #arg == 0 then
      for command_name, command in pairs(commands) do
        print("  ", command_name, "\t", command.description)
      end
    elseif #arg == 1 then
      local command_name = arg[1]
      local command = commands[command_name]
      if command then
        print(command.help)
      else
        invalid_command()
      end
    else
      invalid_command()
    end
  end
}

commands.network = {
  description = "manage networks",
  help = "help text",
  exec = function (...)
    local arg = {...}
    print("debug")
  end
}

commands.host = {
  description = "manage hosts",
  help = "help text",
  exec = function (...)
    local arg = {...}
    print("debug")
  end
}

commands.os = {
  description = "manage OS's",
  help = "help text",
  exec = function (...)
    local arg = {...}
    print("debug")
  end
}

commands.service = {
  description = "manage services",
  help = "help text",
  exec = function (...)
    local arg = {...}
    print("debug")
  end
}

commands.vulnerability = {
  description = "manage vulnerability",
  help = "help text",
  exec = function (...)
    local arg = {...}
    print("debug")
  end
}

commands.tool = {
  description = "manage tools",
  help = "help text",
  exec = function (...)
    local arg = {...}
    print("debug")
  end
}

commands.action = {
  description = "manage actions",
  help = "help text",
  exec = function (...)
    local arg = {...}
    print("debug")
  end
}

commands.malware = {
  description = "manage malwares",
  help = "help text",
  exec = function (...)
    local arg = {...}
    print("debug")
  end
}

commands.score = {
  description = "manage score",
  help = "  score show\tshow current game score\n  score set <new_score>\tset current game score to <new_score>",
  exec = function (...)
    local arg = {...}
    if arg[1] == "show" then
      print("current game score: ", game.map.score)
    elseif arg[1] == "set" then
      local new_score = tonumber(arg[2])
      if new_score then
        game.map.score = new_score
      else
        invalid_command()
      end
    else
      invalid_command()
    end
  end
}

commands.time = {
  description = "manage time",
  help = "  time show {current|start}\tshow current or start game time\n  time set <new_time>\tset current game time to <new_time>",
  exec = function (...)
    local arg = {...}
    if arg[1] == "show" then
      if arg[2] == "current" then
        print("current game time: ", game.map.time, "|", os.date("%x %X", game.map.start_time + game.map.time))
      elseif arg[2] == "start" then
        print("game start time: ", game.map.start_time, "|", os.date("%x %X", game.map.start_time))
      else
        invalid_command()
      end
    elseif arg[1] == "set" then
      local new_time = tonumber(arg[2])
      if new_time then
        game.map.time = new_time
      else
        invalid_command()
      end
    else
      invalid_command()
    end
  end
}

commands.game = {
  description = "manage game",
  help = "  game load\tload saved game\n  game save\tsave current game\n  game tutorial\tstart the tutorial game\n  game example\tstart the example game",
  exec = function (...)
    local arg = {...}
    if arg[1] == "load" then
      game:load_map()
    elseif arg[1] == "save" then
      game:save_map()
    elseif arg[1] == "tutorial" then
      game:load_map("tutorial")
    elseif arg[1] == "example" then
      game:load_map("example")
    else
      invalid_command()
    end
  end
}

-- dispatcher
local command_dispatcher = {}

function command_dispatcher:exec(input)
  if input == "" then return end
  if input == "exit" or input == "quit" then game:exit() end
  -- if input == "help" or input == "?" then self:help(); return end
  input_words = {}
  for word in string.gmatch(input, "%S+") do table.insert(input_words, word) end
  local command_name = input_words[1]
  table.remove(input_words, 1)
  local command_argvs = input_words
  local command = commands[command_name]
  if command then
    command.exec(unpack(command_argvs))
  else
    invalid_command()
  end
end

print("Welcome to HACKING - the pentest tutor game!")
print("-- Enter `help` for the available commands.")
print("-- Enter `exit` to exit the game.")

while true do
  io.write("> ")
  local input = io.read()
  if input == nil then game:exit() end
  command_dispatcher:exec(input)
end
