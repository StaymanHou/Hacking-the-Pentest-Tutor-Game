local top_panel_height = 40
local top_panel_y = 0
local control_panel_height = 300
local control_panel_y = love.graphics.getHeight() - control_panel_height
local map_panel_height = love.graphics.getHeight() - top_panel_height - control_panel_height
local map_panel_y = top_panel_height


local play = {}

function play:load()
  local top_panel = loveframes.Create("panel")
  top_panel:SetState("play")
  top_panel:SetPos(0, 0)
  top_panel:SetHeight(0, top_panel_height)
  top_panel:SetWidth(love.graphics.getWidth())
  self.top_panel = top_panel -- debug

  local menu_button = loveframes.Create("button")
  menu_button:SetParent(top_panel)
  menu_button:SetPos(0, 0)
  menu_button:SetText("Menu")

  local top_score = loveframes.Create("text")
  top_score:SetParent(top_panel)
  top_score:SetText("Score: " .. tostring(game.score))
  top_score:SetPos(400, 0)
  self.top_score = top_score

  local control_panel = loveframes.Create("panel")
  control_panel:SetState("play")
  control_panel:SetPos(0, control_panel_y)
  control_panel:SetHeight(0, control_panel_height)
  control_panel:SetWidth(love.graphics.getWidth())
end

function play.update(dt)
  function scroll(axis, scroll_factor)
    for _,host in ipairs(map.hosts) do
      host.ui[axis] = host.ui[axis] + scroll_factor * dt
    end
    for _,network in ipairs(map.networks) do
      network.ui[axis] = network.ui[axis] + scroll_factor * dt
    end
  end

  if love.mouse.getX() < WINDOW_PADDING then
    scroll("x", SCROLL_SPEED)
  elseif love.mouse.getX() > love.window.getWidth() - WINDOW_PADDING then
    scroll("x", -SCROLL_SPEED)
  end
  if love.mouse.getY() < WINDOW_PADDING then
    scroll("y", SCROLL_SPEED)
  elseif love.mouse.getY() > love.window.getHeight() - WINDOW_PADDING then
    scroll("y", -SCROLL_SPEED)
  end
end

function play.draw()
  for _,network in ipairs(map.networks) do
    local flag_network_discovered = false
    for _,network_interface in ipairs(network.connected_network_interfaces) do
      if network_interface.host.state ~= Host.State.Undiscovered then
        love.graphics.line( network.ui.x+40, network.ui.y+3, network_interface.host.ui.x+network_interface.host.ui.width/2, network_interface.host.ui.y+network_interface.host.ui.height/2 )
      end
      if network_interface.host.state == Host.State.Mine or network_interface.host.state == Host.State.Compromised or network_interface.host.state == Host.State.RootAccess then
        flag_network_discovered = true
      end
    end
    if flag_network_discovered then
      love.graphics.print(network.CIDR, network.ui.x-20, network.ui.y-5)
    end
  end
end

return play