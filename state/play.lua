local top_panel_height = 40
local top_panel_y = 0
local control_panel_height = 300
local control_panel_y = love.graphics.getHeight() - control_panel_height
local map_panel_height = love.graphics.getHeight() - top_panel_height - control_panel_height
local map_panel_y = top_panel_height

local play = {}
play.elements = {}

play.dragging = {}
play.dragging.on = false
play.dragging.origin_x = 0
play.dragging.origin_y = 0
play.dragging.moved = false

function play:load()
  local top_panel = loveframes.Create("panel")
  top_panel:SetState("play")
  top_panel:SetPos(0, 0)
  top_panel:SetHeight(top_panel_height)
  top_panel:SetWidth(love.graphics.getWidth())
  self.top_panel = top_panel -- debug

  local menu_button = loveframes.Create("button")
  menu_button:SetParent(top_panel)
  menu_button:SetPos(0, 0)
  menu_button:SetText("Save & Exit") -- will be Menu later
  menu_button.OnClick = function(object)
    game:save_map()
    love.event.push('quit')
  end

  local top_score = loveframes.Create("text")
  top_score:SetParent(top_panel)
  top_score:SetText("Score: " .. tostring(game.score))
  top_score:SetPos(400, 0)
  top_score:SetFont(love.graphics.newFont(12))
  self.top_score = top_score

  local control_panel = loveframes.Create("panel")
  control_panel:SetState("play")
  control_panel:SetPos(0, control_panel_y)
  control_panel:SetHeight(control_panel_height)
  control_panel:SetWidth(love.graphics.getWidth())
  control_panel:MoveToTop()

  local ip_label = loveframes.Create("text", control_panel)
  ip_label:SetPos(20, 20)
  ip_label:SetText("Host: ")
  ip_label:SetFont(love.graphics.newFont(12))
  ip_label:SetVisible(false)
  play.elements.ip_label = ip_label

  local ip_text = loveframes.Create("text", control_panel)
  ip_text:SetPos(70, 20)
  ip_text:SetText("")
  ip_text:SetFont(love.graphics.newFont(12))
  ip_text:SetVisible(false)
  play.elements.ip_text = ip_text

  local tools_label = loveframes.Create("text", control_panel)
  tools_label:SetPos(20, 50)
  tools_label:SetText("Tools: ")
  tools_label:SetFont(love.graphics.newFont(12))
  tools_label:SetVisible(false)
  play.elements.tools_label = tools_label

  local tools_multichoice = loveframes.Create("multichoice", control_panel)
  tools_multichoice:SetPos(80, 45)
  tools_multichoice:SetVisible(false)
  play.elements.tools_multichoice = tools_multichoice
  tools_multichoice.OnChoiceSelected = function(object, choice)
    local current_tool = Tool.lookup(choice)
    game.play.elements.target_label:SetVisible(false)
    game.play.elements.target_input:SetVisible(false)
    game.play.elements.target_input:Clear()
    game.play.elements.command_label:SetVisible(false)
    game.play.elements.command_text:SetVisible(false)
    game.play.elements.run_button:SetVisible(false)
    game.play.elements.actions_multichoice:Clear()
    for _,action in ipairs(current_tool.available_actions) do
      game.play.elements.actions_multichoice:AddChoice(action.name)
    end
    play.elements.actions_label:SetVisible(true)
    play.elements.actions_multichoice:SetVisible(true)
  end

  local actions_label = loveframes.Create("text", control_panel)
  actions_label:SetPos(20, 80)
  actions_label:SetText("Actions: ")
  actions_label:SetFont(love.graphics.newFont(12))
  actions_label:SetVisible(false)
  play.elements.actions_label = actions_label

  local actions_multichoice = loveframes.Create("multichoice", control_panel)
  actions_multichoice:SetPos(80, 75)
  actions_multichoice:SetVisible(false)
  play.elements.actions_multichoice = actions_multichoice
  actions_multichoice.OnChoiceSelected = function(object, choice)
    local current_action = Action.lookup(choice)
    play.elements.command_text:SetText(choice .. " " .. play.elements.target_input:GetText())
    play.elements.target_label:SetVisible(true)
    play.elements.target_input:SetVisible(true)
    play.elements.command_label:SetVisible(true)
    play.elements.command_text:SetVisible(true)
    play.elements.run_button:SetVisible(true)
  end

  local target_label = loveframes.Create("text", control_panel)
  target_label:SetPos(20, 110)
  target_label:SetText("Target: ")
  target_label:SetFont(love.graphics.newFont(12))
  target_label:SetVisible(false)
  play.elements.target_label = target_label

  local target_input = loveframes.Create("textinput", control_panel)
  target_input:SetPos(80, 105)
  target_input:SetVisible(false)
  play.elements.target_input = target_input
  target_input.OnTextChanged = function(object, entered_char)
    local text = object:GetText()
    play.elements.command_text:SetText(play.elements.actions_multichoice:GetChoice() .. " " .. text)
  end

  local command_label = loveframes.Create("text", control_panel)
  command_label:SetPos(20, 250)
  command_label:SetText("Command: ")
  command_label:SetFont(love.graphics.newFont(12))
  command_label:SetVisible(false)
  play.elements.command_label = command_label

  local command_text = loveframes.Create("text", control_panel)
  command_text:SetPos(50, 280)
  command_text:SetText("")
  command_text:SetFont(love.graphics.newFont(12))
  command_text:SetDefaultColor(0, 128, 64, 255)
  command_text:SetVisible(false)
  play.elements.command_text = command_text

  local run_button = loveframes.Create("button", control_panel)
  run_button:SetPos(110, 245)
  run_button:SetText("Run")
  run_button:SetVisible(false)
  play.elements.run_button = run_button
  run_button.OnClick = function(object)
    local current_action = Action.lookup(play.elements.actions_multichoice:GetChoice())
    local result_string = current_action:run(game.selected_host, play.elements.target_input:GetText())
    local org_text = play.elements.output_text:GetText()
    play.elements.output_text:SetText(org_text .. "\n\n@" .. game.selected_host.hostname .. " > " .. play.elements.command_text:GetText() .. "\n" .. result_string)
  end

  local output_list = loveframes.Create("list", control_panel)
  output_list:SetPos(300, 20)
  output_list:SetSize(love.graphics.getWidth() - 320, 250)
  output_list:SetPadding(5)
  output_list:SetSpacing(5)
  play.elements.output_list = output_list

  local output_text = loveframes.Create("text", control_panel)
  output_text:SetText("Game started!")
  output_text:SetFont(love.graphics.newFont(12))
  output_list:AddItem(output_text)
  play.elements.output_text = output_text
end

function play.update_map()
  for _,axis in ipairs({"x", "y"}) do
    for _,host in ipairs(map.hosts) do
      host.ui[axis] = host.ui["abs_" .. axis] - game.view_point[axis]
    end
    for _,network in ipairs(map.networks) do
      network.ui[axis] = network.ui["abs_" .. axis] - game.view_point[axis]
    end
  end
end

function play.update(dt)
  function scroll(axis, scroll_factor)
    game.view_point[axis] = game.view_point[axis] + scroll_factor * dt
  end

  if play.dragging.on then
    local mouse_x = love.mouse.getX()
    local mouse_y = love.mouse.getY()
    if play.dragging.moved == false then
      if play.dragging.origin_x ~= mouse_x or play.dragging.origin_y ~= mouse_y then
        play.dragging.moved = true
      end
    end
    game.view_point.x = game.view_point.x + play.dragging.origin_x - mouse_x
    game.view_point.y = game.view_point.y + play.dragging.origin_y - mouse_y
    play.dragging.origin_x = mouse_x
    play.dragging.origin_y = mouse_y
  else
    if love.mouse.getX() < WINDOW_PADDING then
      scroll("x", -SCROLL_SPEED)
    elseif love.mouse.getX() > love.window.getWidth() - WINDOW_PADDING then
      scroll("x", SCROLL_SPEED)
    end
    if love.mouse.getY() < WINDOW_PADDING then
      scroll("y", -SCROLL_SPEED)
    elseif love.mouse.getY() > love.window.getHeight() - WINDOW_PADDING then
      scroll("y", SCROLL_SPEED)
    end
  end
  play.update_map()
end

function play.draw()
  for _,network in ipairs(map.networks) do
    local flag_network_discovered = false
    for _,network_interface in ipairs(network.connected_network_interfaces) do
      if network_interface.host.state == Host.State.Mine or network_interface.host.state == Host.State.Compromised or network_interface.host.state == Host.State.RootAccess then
        flag_network_discovered = true
      end
    end
    if flag_network_discovered then
      love.graphics.print(network.CIDR, network.ui.x-20, network.ui.y-5)
      for _,network_interface in ipairs(network.connected_network_interfaces) do
        if network_interface.host.state ~= Host.State.Undiscovered then
          love.graphics.line( network.ui.x+40, network.ui.y+3, network_interface.host.ui.x+network_interface.host.ui.width/2, network_interface.host.ui.y+network_interface.host.ui.height/2 )
        end
      end
    end
  end
end

function play.mousepressed(x, y, button)
  if button == "l" then
    play.dragging.on = true
    play.dragging.origin_x = x
    play.dragging.origin_y = y
  end
end

function play.mousereleased(x, y, button)
  if button == "l" and play.dragging.moved == false and game.selected_host then
    if y > top_panel_height and y < control_panel_y then
      game.selected_host.selected = false
      game.selected_host:set_image()
      game.selected_host = nil
      play.elements.ip_label:SetVisible(false)
      play.elements.ip_text:SetVisible(false)
      play.elements.tools_label:SetVisible(false)
      play.elements.run_button:SetVisible(false)
      play.elements.tools_multichoice:SetVisible(false)
      play.elements.tools_multichoice:Clear()
      play.elements.actions_label:SetVisible(false)
      play.elements.actions_multichoice:SetVisible(false)
      play.elements.actions_multichoice:Clear()
      play.elements.target_label:SetVisible(false)
      play.elements.target_input:SetVisible(false)
      play.elements.target_input:Clear()
      play.elements.command_label:SetVisible(false)
      play.elements.command_text:SetVisible(false)
    end
  end
  play.dragging.on = false
  play.dragging.moved = false
end

return play